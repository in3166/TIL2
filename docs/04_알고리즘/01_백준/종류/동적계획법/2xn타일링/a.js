const fs = require("fs");

const filePath = process.platform === "linux" ? "/dev/stdin" : "./in.txt";
let n = fs.readFileSync(filePath).toString().trim();

let dp = Array(n+1).fill(0);
dp[1] = 1;
dp[2] = 2;

for (let i = 3; i <= n; i++) {
  dp[i] = (dp[i - 1] + dp[i - 2]) % 10007;
}

console.log(dp[n]);

// 10,000보다 큰 최소의 소수 10007
// python처럼 큰 정수형을 지원하지 않는 많은 언어들에서 제공하는 정수형은 4바이트, 8바이트 정도로 기껏해야 1000경 언저리까지만 표현이 가능합니다. 반면에 이 문제에서 요구하는 답은 그와는 비교할 수 없을 정도로 큰 수이기 때문에 그 자료형들을 이용해서 평범하게 계산할 수가 없고, 그래서 작은 범위에서만 계산해도 되도록 어떤 수로 나눈 나머지를 구하도록 만든 것입니다.

// 그나마 이 문제에서 요구하는 답이 그렇게까지 크지는 않기 때문에 python상에서는 그냥 답을 출력해도 별 문제가 없을 수도 있지만, 수가 더 커지면 이제 시간상의 문제도 발생하게 됩니다. 매 연산 시간이 그 자릿수에 비례하게 걸리기 때문에 자릿수가 늘면 늘수록 시간도 점점 더 오래 걸리게 되고, 이런 이유로 결국 답이 지수꼴로 증가하는 문제에서는 언어를 불문하고 이런 방법을 사용할 수밖에 없기도 합니다.

// n타일 경우의 수 2가지
// n-2: ...|
// n-2: ...=  

// n = 3: || | .  =|  .. |=